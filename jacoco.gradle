apply plugin: 'jacoco'

// Filter out modules
def jacocoCoveredProjects = subprojects.findAll { project ->
    project.name == "app" || project.name == "data" || project.name == "domain"
}

def jacocoVersion = "0.8.7"

// Applying the jacoco version might not always work.
// Refer: https://youtrack.jetbrains.com/issue/KT-44757#focus=Comments-27-5247441.0-0
configurations.all{
    resolutionStrategy {
        eachDependency { details ->
            if ('org.jacoco' == details.requested.group) {
                details.useVersion jacocoVersion
            }
        }
    }
}

configure(jacocoCoveredProjects) { project ->
    apply plugin: 'jacoco'

    jacoco {
        toolVersion = jacocoVersion
    }

    tasks.withType(Test) {
        jacoco.includeNoLocationClasses = true
        jacoco.excludes = ['jdk.internal.*']
    }

    task jacocoReport(type: JacocoReport) {
        group = 'Reporting'
        description = 'Generate Jacoco coverage'

        def testTask = 'test'
        def fileFilter = []
        if (project.name == 'data') {
            testTask = 'testDevDebugUnitTest'
            fileFilter = [
                    '**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*',
                    '**/*Test*.*', 'android/**/*.*'
            ]
        }
        if (project.name == 'app') {
            testTask = 'testDevDebugUnitTest'
            fileFilter = [
                    '**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*',
                    '**/*Test*.*', 'android/**/*.*', '**/androidx/databinding/*', '**/App*',
                    '**/*Activity*', '**/*Fragment*', '**/*Adapter*', '**/*ViewHolder*',
                    '**/com/example/clean_architecture/common/*'
            ]
        }
        dependsOn testTask

        reports {
            csv.enabled = true
            xml.enabled = false
            html.enabled = true
        }

        sourceDirectories.setFrom files([
                "${project.projectDir}/src/main/java"
        ])
        classDirectories.setFrom files([
                fileTree(dir: "${project.buildDir}/tmp/kotlin-classes/devDebug", excludes: fileFilter),
                fileTree(dir: "${project.buildDir}/classes/kotlin/main", excludes: fileFilter)
        ])
        executionData.setFrom fileTree(dir: project.buildDir, includes: [
                'jacoco/test.exec',
                'jacoco/testDevDebugUnitTest.exec',
                'outputs/code-coverage/connected/*coverage.ec'
        ])
    }
}

/**
 * Root task that generates an aggregated Jacoco test coverage report for all sub-projects
 * See the <a href="https://bit.ly/2FSWDtQ">JaCoCo Setup for Android Multi Module Project</a>
 */
task jacocoFullReport(type: JacocoReport, group: 'Coverage reports') {
    group = 'Reporting'
    description = 'Generates an aggregate report from all subprojects'

    tasks.withType(Test) {
        ignoreFailures true
    }

    def projects = jacocoCoveredProjects

    // noinspection GrUnresolvedAccess
    dependsOn(projects.jacocoReport)

    final source = files(projects.jacocoReport.sourceDirectories)

    additionalSourceDirs.setFrom source
    sourceDirectories.setFrom source

    classDirectories.setFrom files(projects.jacocoReport.classDirectories)
    executionData.setFrom files(projects.jacocoReport.executionData)

    reports {
        html {
            enabled true
            destination file('build/reports/jacoco/html')
        }
        csv {
            enabled true
            destination file('build/reports/jacoco/jacocoFullReport.csv')
        }
    }

}

/**
 * Show the reports generated in the web browser
 */
task showJacocoFullReport(type: Exec) {
    dependsOn jacocoFullReport
    workingDir "${rootProject.buildDir}/reports/jacoco/html/"

    // Windows
//    commandLine 'cmd', '/c', 'start index.html'

    // macOS
    commandLine 'open', 'index.html'
}